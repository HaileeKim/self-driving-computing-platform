!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS_MINSPEED	rep.cpp	/^const float Driver::ABS_MINSPEED = 3.0f;					\/\/ [m\/s] Below this speed the ABS is disabled (numeric, division by small numbers).$/;"	m	class:Driver	file:
ABS_RANGE	rep.cpp	/^const float Driver::ABS_RANGE = 5.0f;						\/\/ [m\/s] range [0..10]$/;"	m	class:Driver	file:
ABS_SLIP	rep.cpp	/^const float Driver::ABS_SLIP = 2.0f;						\/\/ [m\/s] range [0..10]$/;"	m	class:Driver	file:
BORDER_OVERTAKE_MARGIN	rep.cpp	/^const float Driver::BORDER_OVERTAKE_MARGIN = 0.5f;			\/\/ [m]$/;"	m	class:Driver	file:
CATCH_FACTOR	rep.cpp	/^const float Driver::CATCH_FACTOR = 10.0f;					\/\/ [-] select MIN(catchdist, dist*CATCH_FACTOR) to overtake.$/;"	m	class:Driver	file:
CENTERDIV	rep.cpp	/^const float Driver::CENTERDIV = 0.1f;						\/\/ [-] (factor) [0.01..0.6].$/;"	m	class:Driver	file:
CLUTCH_FULL_MAX_TIME	rep.cpp	/^const float Driver::CLUTCH_FULL_MAX_TIME = 2.0f;			\/\/ [s] Time to apply full clutch.$/;"	m	class:Driver	file:
CLUTCH_SPEED	rep.cpp	/^const float Driver::CLUTCH_SPEED = 5.0f;					\/\/ [m\/s]$/;"	m	class:Driver	file:
DISTCUTOFF	rep.cpp	/^const float Driver::DISTCUTOFF = 200.0f;					\/\/ [m] How far to look, terminate while loops.$/;"	m	class:Driver	file:
Driver	rep.cpp	/^Driver::Driver(int index)$/;"	f	class:Driver
FULL_ACCEL_MARGIN	rep.cpp	/^const float Driver::FULL_ACCEL_MARGIN = 1.0f;				\/\/ [m\/s] Margin reduce oscillation of brake\/acceleration.$/;"	m	class:Driver	file:
G	rep.cpp	/^const float Driver::G = 9.81f;								\/\/ [m\/(s*s)] Welcome on Earth.$/;"	m	class:Driver	file:
LOOKAHEAD_CONST	rep.cpp	/^const float Driver::LOOKAHEAD_CONST = 17.0f;				\/\/ [m]$/;"	m	class:Driver	file:
LOOKAHEAD_FACTOR	rep.cpp	/^const float Driver::LOOKAHEAD_FACTOR = 0.33f;				\/\/ [-]$/;"	m	class:Driver	file:
MAX_FUEL_PER_METER	rep.cpp	/^const float Driver::MAX_FUEL_PER_METER = 0.0008f;			\/\/ [liter\/m] fuel consumtion.$/;"	m	class:Driver	file:
MAX_INC_FACTOR	rep.cpp	/^const float Driver::MAX_INC_FACTOR = 5.0f;					\/\/ [m] Increment faster if speed is slow [1.0..10.0].$/;"	m	class:Driver	file:
MAX_SPEED	rep.cpp	/^const float Driver::MAX_SPEED = 84.0f;						\/\/ [m\/s] Speed to compute the percentage of brake to apply.$/;"	m	class:Driver	file:
MAX_UNSTUCK_ANGLE	rep.cpp	/^const float Driver::MAX_UNSTUCK_ANGLE = 15.0f\/180.0f*PI;	\/\/ [radians] If the angle of the car on the track is smaller, we assume we are not stuck.$/;"	m	class:Driver	file:
MAX_UNSTUCK_SPEED	rep.cpp	/^const float Driver::MAX_UNSTUCK_SPEED = 5.0f;				\/\/ [m\/s] Below this speed we consider being stuck.$/;"	m	class:Driver	file:
MIN_UNSTUCK_DIST	rep.cpp	/^const float Driver::MIN_UNSTUCK_DIST = 3.0f;				\/\/ [m] If we are closer to the middle we assume to be not stuck.$/;"	m	class:Driver	file:
OVERTAKE_OFFSET_SPEED	rep.cpp	/^const float Driver::OVERTAKE_OFFSET_SPEED = 5.0f;			\/\/ [m\/s] Offset change speed.$/;"	m	class:Driver	file:
PIT_BRAKE_AHEAD	rep.cpp	/^const float Driver::PIT_BRAKE_AHEAD = 200.0f;				\/\/ [m] Workaround for "broken" pitentries.$/;"	m	class:Driver	file:
PIT_LOOKAHEAD	rep.cpp	/^const float Driver::PIT_LOOKAHEAD = 6.0f;					\/\/ [m] Lookahead to stop in the pit.$/;"	m	class:Driver	file:
PIT_MU	rep.cpp	/^const float Driver::PIT_MU = 0.4f;							\/\/ [-] Friction of pit concrete.$/;"	m	class:Driver	file:
SHIFT	rep.cpp	/^const float Driver::SHIFT = 0.9f;							\/\/ [-] (% of rpmredline) When do we like to shift gears.$/;"	m	class:Driver	file:
SHIFT_MARGIN	rep.cpp	/^const float Driver::SHIFT_MARGIN = 4.0f;					\/\/ [m\/s] Avoid oscillating gear changes.$/;"	m	class:Driver	file:
SIDECOLL_MARGIN	rep.cpp	/^const float Driver::SIDECOLL_MARGIN = 3.0f;					\/\/ [m] Distance between car centers to avoid side collisions.$/;"	m	class:Driver	file:
TCL_RANGE	rep.cpp	/^const float Driver::TCL_RANGE = 10.0f;						\/\/ [m\/s] range [0..10]$/;"	m	class:Driver	file:
TCL_SLIP	rep.cpp	/^const float Driver::TCL_SLIP = 2.0f;						\/\/ [m\/s] range [0..10]$/;"	m	class:Driver	file:
TEAM_DAMAGE_CHANGE_LEAD	rep.cpp	/^const int Driver::TEAM_DAMAGE_CHANGE_LEAD = 700;			\/\/ When to change position in the team?$/;"	m	class:Driver	file:
TEAM_REAR_DIST	rep.cpp	/^const float Driver::TEAM_REAR_DIST = 50.0f;					\/\/$/;"	m	class:Driver	file:
UNSTUCK_TIME_LIMIT	rep.cpp	/^const float Driver::UNSTUCK_TIME_LIMIT = 2.0f;				\/\/ [s] We try to get unstuck after this time.$/;"	m	class:Driver	file:
USE_LEARNED_OFFSET_RANGE	rep.cpp	/^const float Driver::USE_LEARNED_OFFSET_RANGE = 0.2f;		\/\/ [m] if offset < this use the learned stuff$/;"	m	class:Driver	file:
WIDTHDIV	rep.cpp	/^const float Driver::WIDTHDIV = 3.0f;						\/\/ [-] Defines the percentage of the track to use (2\/WIDTHDIV).$/;"	m	class:Driver	file:
brakedist	rep.cpp	/^float Driver::brakedist(float allowedspeed, float mu)$/;"	f	class:Driver
cardata	rep.cpp	/^Cardata *Driver::cardata = NULL;$/;"	m	class:Driver	file:
close_port	test_read.cpp	/^int close_port()$/;"	f
close_port	test_write.cpp	/^int close_port()$/;"	f
computeRadius	rep.cpp	/^void Driver::computeRadius(float *radius)$/;"	f	class:Driver
currentsimtime	rep.cpp	/^double Driver::currentsimtime;$/;"	m	class:Driver	file:
drive	rep.cpp	/^void Driver::drive(tSituation *s)$/;"	f	class:Driver
endRace	rep.cpp	/^void Driver::endRace(tSituation *s)$/;"	f	class:Driver
filterABS	rep.cpp	/^float Driver::filterABS(float brake)$/;"	f	class:Driver
filterBColl	rep.cpp	/^float Driver::filterBColl(float brake)$/;"	f	class:Driver
filterBPit	rep.cpp	/^float Driver::filterBPit(float brake)$/;"	f	class:Driver
filterBrakeSpeed	rep.cpp	/^float Driver::filterBrakeSpeed(float brake)$/;"	f	class:Driver
filterOverlap	rep.cpp	/^float Driver::filterOverlap(float accel)$/;"	f	class:Driver
filterSColl	rep.cpp	/^float Driver::filterSColl(float steer)$/;"	f	class:Driver
filterTCL	rep.cpp	/^float Driver::filterTCL(float accel)$/;"	f	class:Driver
filterTCL_4WD	rep.cpp	/^float Driver::filterTCL_4WD()$/;"	f	class:Driver
filterTCL_FWD	rep.cpp	/^float Driver::filterTCL_FWD()$/;"	f	class:Driver
filterTCL_RWD	rep.cpp	/^float Driver::filterTCL_RWD()$/;"	f	class:Driver
filterTrk	rep.cpp	/^float Driver::filterTrk(float accel)$/;"	f	class:Driver
getAccel	rep.cpp	/^float Driver::getAccel()$/;"	f	class:Driver
getAllowedSpeed	rep.cpp	/^float Driver::getAllowedSpeed(tTrackSeg *segment)$/;"	f	class:Driver
getBrake	rep.cpp	/^float Driver::getBrake()$/;"	f	class:Driver
getClutch	rep.cpp	/^float Driver::getClutch()$/;"	f	class:Driver
getDistToSegEnd	rep.cpp	/^float Driver::getDistToSegEnd()$/;"	f	class:Driver
getGear	rep.cpp	/^int Driver::getGear()$/;"	f	class:Driver
getOffset	rep.cpp	/^float Driver::getOffset()$/;"	f	class:Driver
getSteer	rep.cpp	/^float Driver::getSteer()$/;"	f	class:Driver
getTargetPoint	rep.cpp	/^vec2f Driver::getTargetPoint()$/;"	f	class:Driver
initCa	rep.cpp	/^void Driver::initCa()$/;"	f	class:Driver
initCw	rep.cpp	/^void Driver::initCw()$/;"	f	class:Driver
initTCLfilter	rep.cpp	/^void Driver::initTCLfilter()$/;"	f	class:Driver
initTireMu	rep.cpp	/^void Driver::initTireMu()$/;"	f	class:Driver
initTrack	rep.cpp	/^void Driver::initTrack(tTrack* t, void *carHandle, void **carParmHandle, tSituation *s)$/;"	f	class:Driver
isAlone	rep.cpp	/^int Driver::isAlone()$/;"	f	class:Driver
isStuck	rep.cpp	/^bool Driver::isStuck()$/;"	f	class:Driver
main	test_read.cpp	/^int main(void)$/;"	f
main	test_txt.cpp	/^int main(void)$/;"	f
main	test_write.cpp	/^int main(void)$/;"	f
newRace	rep.cpp	/^void Driver::newRace(tCarElt* car, tSituation *s)$/;"	f	class:Driver
open_port	test_read.cpp	/^int open_port(const char *port)$/;"	f
open_port	test_write.cpp	/^int open_port(const char *port)$/;"	f
pitCommand	rep.cpp	/^int Driver::pitCommand(tSituation *s)$/;"	f	class:Driver
read_can_port	test_read.cpp	/^int read_can_port;$/;"	v
read_can_port	test_write.cpp	/^int read_can_port;$/;"	v
read_port	test_read.cpp	/^void read_port()$/;"	f
read_port	test_write.cpp	/^void read_port()$/;"	f
soc	test_read.cpp	/^int soc;$/;"	v
soc	test_write.cpp	/^int soc;$/;"	v
update	rep.cpp	/^void Driver::update(tSituation *s)$/;"	f	class:Driver
write_port	test_read.cpp	/^void write_port()$/;"	f
write_port	test_write.cpp	/^void write_port()$/;"	f
~Driver	rep.cpp	/^Driver::~Driver()$/;"	f	class:Driver
